extends keys-layout

block content
  main.container
    h1.text-uppercase #{("Signatures")}
    .card.bg-light
      .card-header
        ul.nav.nav-tabs.card-header-tabs#myTab(role="tablist")
          li.nav-item(role="presentation")
            button.nav-link.active#sign-tab(data-bs-toggle="tab", data-bs-target="#sign", type="button", role="tab", aria-controls="sign", aria-selected="true") #{("Sign")}
          li.nav-item(role="presentation")
            button.nav-link#verify-tab(data-bs-toggle="tab", data-bs-target="#verify", type="button", role="tab", aria-controls="verify", aria-selected="false") #{("Verify")}
      .card-body#card
        .tab-content#myTabContent
          .tab-pane.show.active#sign(role="tabpanel", aria-labelledby="sign-tab")
            form.card-body
              .row.mb-3
                label.col-sm-2.col-form-label.text-end(for="data") #{("Message")}
                .col-md-10
                  textarea.form-control#sign-message(rows=5, aria-label="Message")
              .row.mb-3
                label.col-sm-2.col-form-label.text-end(for="data") #{("Private Key")}
                .col-md-10
                  .input-group
                    input#privateKey(type="number").form-control
                    span.input-group-btn
                      button#sign-button.btn.btn-block.btn-primary(type="button") #{("Sign")}
              .row.mb-3
                label.col-sm-2.col-form-label.text-end(for="data") #{("Message Signature")}
                .col-md-10
                  input#sign-signature.form-control(disabled)
          .tab-pane#verify(role="tabpanel", aria-labelledby="verify-tab")
            form.card-body
              .row.mb-3
                label.col-sm-2.col-form-label.text-end(for="data") #{("Message")}
                .col-md-10
                  textarea.form-control#verify-message(rows=5, aria-label="Message")
              .row.mb-3
                label.col-sm-2.col-form-label.text-end(for="data") #{("Public Key")}
                .col-md-10
                  input#publicKey.form-control
              .row.mb-3
                label.col-sm-2.col-form-label.text-end(for="data") #{("Signature")}
                .col-md-10
                  input#verify-signature.form-control
                  button#verify-button.btn.btn-block.btn-primary.float-end.mt-3(type="button") #{("Verify")}

  script.
    var EC = elliptic.elliptic().ec;
    var ec = new EC("secp256k1");

    var keypair = ec.genKeyPair();
    if (Cookies.get("privateKey")) {
      keypair = ec.keyFromPrivate(Cookies.get("privateKey"));
    }

    function update() {
      var prv = keypair.getPrivate("hex");
      var pub = keypair.getPublic("hex");
      $("#privateKey").val(bigInt(prv, 16).toString());
      $("#publicKey").val(pub);
      Cookies.set("privateKey", prv.toString());
      Cookies.set("publicKey", pub);
    }

    function resetVerifier() {
      $("#card").removeClass("alert-success");
      $("#card").removeClass("alert-danger");
    }

    $(function() {
      $("#sign-button").click(function() {
        var binaryMessage = buffer.Buffer.from(CryptoJS.SHA256($("#sign-message").val()).toString(CryptoJS.enc.Hex));
        var hexSignature = buffer.Buffer.from(keypair.sign(binaryMessage).toDER()).toString("hex");
        $("#sign-signature").val(hexSignature);
        $("#verify-signature").val(hexSignature);
        update();
        resetVerifier();
      });
      $("#verify-button").click(function() {
        // verify by using only the public key
        $("#publicKey").val($("#publicKey").val().replace(/[^0-9a-fA-F]/g, ""));
        var tmpKey;
        try {
          tmpKey = ec.keyFromPublic($("#publicKey").val(), "hex");
          var binaryMessage = buffer.Buffer.from(CryptoJS.SHA256($("#verify-message").val()).toString(CryptoJS.enc.Hex));
          if (tmpKey.verify(binaryMessage, $("#verify-signature").val())) {
            $("#card").addClass("alert-success");
          }
          else {
            $("#card").addClass("alert-danger");
          }
        }
        catch(e) {
          $("#card").addClass("alert-danger");
        }
      });
      $("#sign-signature").bind("keyup", function() {
        resetVerifier();
      });
      $("#sign-message").bind("keyup", function() {
        resetVerifier();
      });
      $("#verify-signature").bind("keyup", function() {
        resetVerifier();
      });
      $("#verify-message").bind("keyup", function() {
        resetVerifier();
      });
      $("#publicKey").bind("keyup", function() {
        resetVerifier();
      });
      $("#privateKey").bind("keyup", function() {
        $("#privateKey").val($("#privateKey").val().replace(/\D/g, ""));
        keypair = ec.keyFromPrivate(bigInt($("#privateKey").val()).toString(16));
        resetVerifier();
        update();
      });
      if (Cookies.get("message")) {
        $("#sign-message").val(Cookies.get("message"));
        $("#verify-message").val(Cookies.get("message"));
      }
      $("#sign-message").bind("keyup", function() {
        Cookies.set("message", $("#sign-message").val());
        $("#verify-message").val($("#sign-message").val());
      });
      $("#verify-message").bind("keyup", function() {
        Cookies.set("message", $("#verify-message").val());
        $("#sign-message").val($("#verify-message").val());
      });
      $("#myTab").on("shown.bs.tab", function (e) {
        resetVerifier();
      });
      update();
    });
